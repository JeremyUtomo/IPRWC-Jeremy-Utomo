name: IPRWC CI/CD

on:
  push:
    branches:
      - main  # Runs only on pushes to the main branch

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v3

  #   # ðŸ”¹ Setup JDK for Spring Boot
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
  #       cache: 'maven'  # Enable built-in Maven dependency caching

  #   # ðŸ”¹ Cache Maven packages
  #   - name: Cache Maven packages
  #     uses: actions/cache@v3
  #     with:
  #       path: ~/.m2
  #       key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
  #       restore-keys: ${{ runner.os }}-m2

  #   # ðŸ”¹ Build Spring Boot Backend
  #   - name: Build Backend with Maven
  #     run: |
  #       cd IPRWC-Springboot
  #       mvn clean package -DskipTests

  #   # ðŸ”¹ Setup Node.js for Angular
  #   - name: Set up Node.js
  #     uses: actions/setup-node@v3
  #     with:
  #       node-version: '18'
  #       cache: 'npm'  # Enable built-in npm caching
  #       cache-dependency-path: IPRWC-Angular/package-lock.json

  #   # ðŸ”¹ Cache Node modules
  #   - name: Cache node modules
  #     uses: actions/cache@v3
  #     with:
  #       path: IPRWC-Angular/node_modules
  #       key: ${{ runner.os }}-node-${{ hashFiles('IPRWC-Angular/package-lock.json') }}
  #       restore-keys: ${{ runner.os }}-node-

  #   # ðŸ”¹ Install Dependencies & Build Angular Frontend
  #   - name: Build Frontend
  #     run: |
  #       cd IPRWC-Angular
  #       npm ci
  #       npm update
  #       npm run build

  #   # ðŸ”¹ Set up Docker Buildx for better layer caching
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v2

  #   # ðŸ”¹ Login to Docker Hub
  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   # ðŸ”¹ Build and Push Backend Docker Image
  #   - name: Build and Push Backend Image
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: ./IPRWC-Springboot
  #       push: true
  #       tags: ${{ secrets.DOCKER_USERNAME }}/springboot-app:latest
  #       platforms: linux/amd64
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  #   # ðŸ”¹ Build and Push Frontend Docker Image
  #   - name: Build and Push Frontend Image
  #     uses: docker/build-push-action@v4
  #     with:
  #       context: ./IPRWC-Angular
  #       push: true
  #       tags: ${{ secrets.DOCKER_USERNAME }}/angular-app:latest
  #       platforms: linux/amd64
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    # needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Copy docker-compose.yml to server
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        chmod 600 key.pem
        scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} ./docker-compose.yml root@${{ secrets.IPV4 }}:/root

    - name: Deploy application
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} root@${{ secrets.IPV4 }} "
          echo '${{ secrets.DOCKERHUB_PASSWORD }}' | docker login -u hujeremy --password-stdin &&
          docker-compose pull &&
          docker-compose down &&
          docker-compose up -d"